<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.coderman.club.mapper.post.PostMapper">
  <resultMap id="BaseResultMap" type="com.coderman.club.model.post.PostModel">
    <id column="post_id" jdbcType="BIGINT" property="postId" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="section_id" jdbcType="BIGINT" property="sectionId" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="views_count" jdbcType="INTEGER" property="viewsCount" />
    <result column="likes_count" jdbcType="INTEGER" property="likesCount" />
    <result column="comments_count" jdbcType="INTEGER" property="commentsCount" />
    <result column="collects_count" jdbcType="INTEGER" property="collectsCount" />
    <result column="created_at" jdbcType="TIMESTAMP" property="createdAt" />
    <result column="last_updated_at" jdbcType="TIMESTAMP" property="lastUpdatedAt" />
    <result column="is_active" jdbcType="BIT" property="isActive" />
    <result column="is_draft" jdbcType="BIT" property="isDraft" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.coderman.club.model.post.PostModel">
    <result column="content" jdbcType="LONGVARCHAR" property="content" />
  </resultMap>
  <sql id="Base_Column_List">
    post_id, user_id, section_id, title, views_count, likes_count, comments_count, collects_count, 
    created_at, last_updated_at, is_active, is_draft
  </sql>
  <sql id="Blob_Column_List">
    content
  </sql>

  <select id="countPage" resultType="long">
    select count(1)
    FROM club_post t1
    LEFT JOIN club_user t2 ON t1.user_id = t2.user_id
    LEFT JOIN club_user_info t3 ON t2.user_id = t3.user_id
    LEFT JOIN club_section t4 on t1.section_id  = t4.section_id
    <include refid="pageWhere"></include>
  </select>

  <select id="pageList" resultType="com.coderman.club.vo.post.PostListItemVO">
    SELECT
    t1.post_id,
    t1.user_id,
    t1.section_id,
    t1.title,
    t1.views_count,
    t1.likes_count,
    t1.comments_count,
    t1.collects_count,
    t1.created_at,
    t1.last_updated_at,
    t2.nickname,
    t2.username,
    t3.avatar,
    t4.section_name
    FROM club_post t1
    LEFT JOIN club_user t2 ON t1.user_id = t2.user_id
    LEFT JOIN club_user_info t3 ON t2.user_id = t3.user_id
    LEFT JOIN club_section t4 on t1.section_id  = t4.section_id
    <include refid="pageWhere"></include>
    ORDER BY t1.created_at DESC
    limit #{offset}, #{limit}
  </select>

  <sql id="pageWhere">
    <where>
      t1.is_active = 1 and t1.is_draft = 0
      <if test="sectionIdList!=null and sectionIdList.size() > 0">
        and t1.section_id in
        <foreach collection="sectionIdList" item="item" separator="," open="(" close=")">
          #{item}
        </foreach>
      </if>
    </where>
  </sql>


  <select id="selectPostDetailVoById" resultType="com.coderman.club.vo.post.PostDetailVO">
        SELECT
            t1.post_id,
            t1.user_id,
            t1.section_id,
            t1.title,
            t1.views_count,
            t1.likes_count,
            t1.comments_count,
            t1.collects_count,
            t1.content,
            t1.created_at,
            t1.last_updated_at,
            t2.nickname,
            t3.avatar,
            t4.section_name,
            t4.parent_section as parent_section_id
        FROM club_post t1
                 LEFT JOIN club_user t2 ON t1.user_id = t2.user_id
                 LEFT JOIN club_user_info t3 ON t2.user_id = t3.user_id
                 LEFT JOIN club_section t4 on t1.section_id = t4.section_id
        WHERE t1.is_active = 1 and t1.is_draft = 0  and t1.post_id = #{postId}
    </select>
  <select id="selectUserPostById" resultType="com.coderman.club.model.post.PostModel">
    select
    <include refid="Base_Column_List"></include>
    from club_post where post_id = #{postId} and user_id = #{userId} and is_active = 1
  </select>
  <update id="addViewsCount">
    update club_post set views_count = views_count +#{count} where post_id = #{postId}
  </update>
  <update id="addCommentsCount">
    update club_post set comments_count = comments_count +#{count} where post_id = #{postId}
  </update>
  <update id="updatePostWithContentById">
    update club_post
    set
        section_id = #{updateModel.sectionId,jdbcType=BIGINT},
        title = #{updateModel.title,jdbcType=VARCHAR},
        last_updated_at = #{updateModel.lastUpdatedAt,jdbcType=TIMESTAMP},
        is_draft = #{updateModel.isDraft,jdbcType=BIT},
        content = #{updateModel.content,jdbcType=LONGVARCHAR}
    where post_id = #{updateModel.postId,jdbcType=BIGINT}
  </update>
  <update id="addLikesCount">
    update club_post set likes_count = likes_count + #{count}  where post_id = #{postId}
  </update>
  <update id="addCollectsCount">
    update club_post set collects_count = collects_count + #{count}  where post_id = #{postId}
  </update>
  <select id="getPostTaskList" resultType="com.coderman.club.vo.post.PostHotTaskVO">
    SELECT
      group_flag,
      MIN( post_id ) AS beginId,
      MAX( post_id ) AS endId
    FROM
      (
        SELECT
          CEIL( row_num / #{batchSize} ) AS group_flag,
          post_id
        FROM
          (
            SELECT
              @rownum := @rownum + 1 AS row_num,
              post_id
            FROM
                ( SELECT @rownum := 0 ) r,
                club_post
            ORDER BY
              post_id ASC
          ) ranked
      ) grouped
    GROUP BY
      group_flag
    ORDER BY
      group_flag
  </select>
  <select id="getPostFormIndex" resultType="com.coderman.club.vo.post.PostHotVO">
    SELECT
      t1.post_id,
      t1.user_id,
      t1.section_id,
      t1.title,
      t1.views_count,
      t1.likes_count,
      t1.comments_count,
      t1.collects_count,
      t1.created_at,
      t1.last_updated_at
    FROM club_post t1
    WHERE t1.is_active = 1 and t1.is_draft = 0
    and t1.views_count > 0 and t1.likes_count > 0 and  t1.comments_count > 0 and t1.collects_count > 0
    and t1.post_id between #{beginId} and #{endId}
    ORDER BY t1.created_at DESC
  </select>
</mapper>